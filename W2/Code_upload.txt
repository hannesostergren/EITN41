------------------------------------------ M2P1.py -------------------------------------------------------
# Input
    # The parameters k and n within the range 3≤k<n≤8,
    # A private polynomial,
    # Polynomial shares from collaborating participants.
 #output integer


def interpolate(k, n, shares, collaborants):
    total = 0
    for i in range(k):
        res = 1
        for j in range(k):
            if (i != j):
                res = res * collaborants[j] / (collaborants[j] - collaborants[i])
        total += shares[i] * res
    print(int(total))

def f(x):
    return 15 + 14*x + 18*x**2 + 13*x**3 + 6*x**4

if __name__ == "__main__":
    k = 5
    n = 6
    first_point = f(1)
    shares = [38, 67, 65, 67, 63]
    shares.insert(0, first_point)
    master_point = sum(shares) #f_n(1)
    collab_shares = [1963, 7468, 48346, 96691]
    collab_shares.insert(0, master_point)
    collaborants = [1, 2, 3, 5, 6]
    interpolate(k, n, collab_shares, collaborants)
    
    ------------------------------------------ M2P2.py -------------------------------------------------------
    
# implement the Optimal Asymmetric Encryption Padding (OAEP) for RSA (see description below)
# mgfSeed = 0123456789abcdef (hexadecimal) 

# maskLen = 30 (decimal
import hashlib
import re

# def I2OSP(x, xLen):
#     x = []
#     X = 1
#     if(len(x) >= 256**xLen):
#         print("integer too large")
#         return ""
#     for i in range(xLen, 0, -1):
#         x.append(256**(i-1))
#     for i in range(xLen):
#         X *= x[i]
#     return hex(X)

def I2OSP(n, leng, order):
    return n.to_bytes(leng, order)

def MGF1(mgfSeed, maskLen):
    if(maskLen > 2**32):
        print("mask too long")
        return ""
    T = ""
    for count in range((maskLen)-1):
        C = I2OSP(count, 4, "big")
        conc = mgfSeed + C
        T += hashlib.sha1(conc).hexdigest()
    return T[:maskLen*2]

def xor(a, b):
    return bytes(i ^j for i, j in zip(bytes.fromhex(a), bytes.fromhex(b)))

def OAEP_encode(M, seed, k, hLen):
    mLen = int(len(M) / 2)
    if mLen > k - 2*hLen - 2:
        return "message too long"
    lHash = hashlib.sha1(b"").hexdigest()
    PS = (k - mLen - 2*hLen - 2) * "00"
    db = lHash + PS + "01" + M
    dbMask = MGF1(bytes.fromhex(seed), k - hLen - 1)
    maskedDb = xor(db, dbMask)
    seedMask = MGF1(maskedDb, hLen)
    maskedSeed = xor(seed, seedMask)
    em = "00" + (maskedSeed + maskedDb).hex()
    return em

def OAEP_decode(em, k, hLen):
    maskedSeed = em[2:2 * hLen + 2]
    maskedDb = em[2 * hLen + 2:]
    seedMask = MGF1(bytes.fromhex(maskedDb), hLen)
    seed = xor(maskedSeed, seedMask)
    dbMask = MGF1(seed, k - hLen - 1)
    DB = xor(maskedDb, dbMask)
    M = DB[hLen:]
    M = M.hex()
    while(M[0] == "0"):
        M = M[1:]
    M = M[1:]
    return M



if __name__ == "__main__":
    #test = OAEP_encode("fd5507e917ecbe833878", "1e652ec152d0bfcd65190ffc604c0933d0423381", 128, 20)
    #print(test)
    #print(OAEP_decode(test, 128, 20))
    print(MGF1(bytes.fromhex("0d33b8ed2b871945b6e6b965f6a3ad7f0f6908879a23"), 22))
    print(OAEP_encode("c7bd4ab6a5ba9211f5a128808949eb2e3d0b27610165d01e96", "97995ee677b1118d590a07efd9b2010905f0b898", 128, 20))
    print(OAEP_decode("0043759f100e1b0ffbaed6b5e234f085cfd20cb94962f786195f85f8d337481f2abb06da0f3f9b1a5e413d31e347a179461d13c47b4f6893c02220932443e5764a02e5e0233d76bbdbc5c2e65c3dc014dd42a6532a2b5dcf4327381adfb17506a65397e78b611b2080a5d90a4818eea05072f5cc639ae55f1c7462da3621dcd0", 128, 20))
    #18a65e36189833d99e55a68dedda1cce13a494c947817d25dc80d9b4586a

    ------------------------------------------ M2P3.py -------------------------------------------------------
    
import socket
import random
import hashlib

SOC = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  
SOC.connect(("eitn41.eit.lth.se", 1337))
p = int('FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF', 16)
g = 2
SHARED_SECRET = "eitn41 <3"

def receive():
    message = SOC.recv(4096).decode('utf8').strip()
    return message

def send(message):
    formatted_message = format(message, 'x')
    SOC.send(formatted_message.encode('utf8'))

def gen_g(g):
    r = random.randint(1, p)
    ret = pow(g, r, p)
    return ret, r

def xor(a, b):
    return bytes(i ^j for i, j in zip(bytes.fromhex(a), bytes.fromhex(b)))

def main():

    ##########################
    #### D-H Key Exchange ####
    ##########################

    g_x1 = int(receive(), 16)
    g_x2, x2 = gen_g(g)
    send(g_x2)
    print('\nsent g_x2:', receive())

    ###############################
    #### Socialist Millionaire ####
    ###############################

    g_a2 = int(receive(), 16)
    g_b2, b2 = gen_g(g)
    send(g_b2)
    print("sent g_b2: ", receive())

    g_a3 = int(receive(), 16)
    g_b3, b3 = gen_g(g)
    send(g_b3)
    print("sent g_b3: ", receive())

    P_a = int(receive(), 16)
    g3 = pow(g_a3, b3, p)
    P_b, b = gen_g(g3)

    send(P_b)
    print("sent P_b: ", receive())

    Q_a = int(receive(), 16)
    g2 = pow(g_a2, b2, p)
    g_x1x2 = pow(g_x1, x2, p)
    bytes_g_x1x2 = g_x1x2.to_bytes((g_x1x2.bit_length() + 7) // 8, 'big')
    y = hashlib.sha1(bytes_g_x1x2 + SHARED_SECRET.encode('utf-8')).hexdigest()
    y = int(y, 16)
    Q_b = pow(g, b, p) * pow(g2, y, p)
    send(Q_b)
    print("sent Q_b: ", receive())

    R_a = int(receive(), 16)
    R_b = pow(Q_a * pow(Q_b, -1, p), b3, p)
    send(R_b)
    print("sent R_b: ", receive())
    print("Auth: ", receive())

    
    #####################
    #### Secure Chat ####
    #####################

    print("Secure chat:")
    message = "427541422c9f68f2b4ea663b07f0da19d51b4b53"
    hex_mess = int(message, 16)
    send(hex_mess ^ g_x1x2)
    print("response: ", receive())



if __name__ == "__main__":
    main()

